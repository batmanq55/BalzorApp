@inject NavigationManager NavigationManager

<h3>TestServerComponent</h3>

@* <TestingComponent></TestingComponent> *@

<div class="container-fluid text-center">
    <div class="row w-100">
        @foreach (var city in cities)
        {
            <div class="col">
                <button type="button" class="btn btn-primary">@city</button>
            </div>
        }
    </div>
</div>

<ServerInterActiveComp></ServerInterActiveComp>

<p>
    <ModelAppendToServerComponent></ModelAppendToServerComponent>
</p>
<ul>
    @foreach (var server in servers)
    {
        <li>
            <span data-name="@server.Name" data-status="@(server.IsOnline?"Online":"Offline")" style="@($"color:{(server.IsOnline?"green":"red")}")">
                @server.Name is @server.City that is
                @(server.IsOnline ? "Online" : "Offline")
            </span>
            <a href="/Server/Edit/@server.ServerId" class="btn btn-link">Edit</a>
            &nbsp;
            <EditForm Model="server"
                      FormName="@($"form-server-{server.ServerId}")"
                      OnValidSubmit="@(() => {DeleteServer(server.ServerId);})">
                <button type="submit" class="btn btn-danger">Delete</button>
            </EditForm>
            @* <button type="button" class="btn btn-primary" @onclick="@(() => {DeleteServer(server.ServerId);})">Delete</button> *@
        </li>
    }
</ul>
<p>
    <a href="/Server/Add" class="btn btn-primary"> Add Server</a>
</p>
@code {
    public List<ServerDetails> servers = ServerDetailssRepository.GetServerDetailssByCity("Toronto");
    public List<string> cities = CityRepository.GetCities();
    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServerDetailssRepository.DeleteServerDetails(serverId);
            NavigationManager.Refresh();
        }
    }
}
